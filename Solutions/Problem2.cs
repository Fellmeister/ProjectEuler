using Shouldly;

namespace Test;

public class Problem2
{
    // Even Fibonacci numbers
    // Problem 2
    
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

    // Thoughts....
    
    // Generate Fibonacci Numbers where fN < 4M - DONE
    // Gather even numbers - DONE
    // Sum them

    [Theory]
    [InlineData(1, false)]
    [InlineData(2, true)]
    [InlineData(3, false)]
    [InlineData(4, true)]
    [InlineData(5, false)]
    public void ShouldReturnTrueWhenNumberIsEven(int numToTest, bool expected)
    {
        Problem2Solver.IsEven(numToTest).ShouldBe(expected);
    }

    [Theory]
    [InlineData(10, 5)]
    [InlineData(90, 10)]
    public void ShouldGenerateFibonacciSequenceWithUpperBound(int upperBound, int expectedCount)
    {
        List<int> result = Problem2Solver.GenerateFibonacciSequence(upperBound).ToList();
        
        result.Count().ShouldBe(expectedCount);
    }

    [Fact]
    public void ShouldReturnEvenNumbersFromFibonacciSequence()
    {
        var upperBound = 90;

        List<int> result = Problem2Solver.GenerateFibonacciSequenceWithOnlyEvenNumbers(upperBound).ToList();
        
        result.Count().ShouldBe(3);
        // Contains x,y,z nums
    }
    
}

public static class Problem2Solver
{
    public static bool IsEven(int i)
    {
        return (i % 2) == 0;
    }

    public static List<int> GenerateFibonacciSequence(int firstNum, int secondNum, int numOfSequenceItems)
    {
        List<int> fibSeq = new List<int>();
        
        fibSeq.Add(firstNum);
        fibSeq.Add(secondNum);

        var firstPrevNum = firstNum;
        var secondPrevNum = secondNum;
        
        for (int i = 0; i < numOfSequenceItems - 2; i++)
        {
            var result = firstPrevNum + secondPrevNum;
            fibSeq.Add(result);
            firstPrevNum = secondPrevNum;
            secondPrevNum = result;
        }
        
        return fibSeq;
    }


    public static List<int> GenerateFibonacciSequence(int upperBound)
    {
        List<int> fibSeq = new List<int>();

        const int firstNum = 1;
        const int secondNum = 2;

        fibSeq.Add(firstNum);
        fibSeq.Add(secondNum);

        var firstPrevNum = firstNum;
        var secondPrevNum = secondNum;

        while (true)
        {
            var result = firstPrevNum + secondPrevNum;
            if (result < upperBound)
            {
                fibSeq.Add(result);
                // setup next iteration
                firstPrevNum = secondPrevNum;
                secondPrevNum = result;
            }
            else
            {
                break;
            }
        }
        
        return fibSeq;
    }

    public static List<int> GenerateFibonacciSequenceWithOnlyEvenNumbers(int upperBound)
    {
        return GenerateFibonacciSequence(upperBound).Where(IsEven).ToList();;
    }
}